include(CMakeForceCompiler)

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)

set(CMAKE_C_FLAGS "%(CCFLAGS)s" CACHE INTERNAL "c compiler flags")
set(CMAKE_CXX_FLAGS "%(CCFLAGS)s %(CXXFLAGS)s" CACHE INTERNAL "cxx compiler flags")
set(CMAKE_ASM_FLAGS "%(ASFLAGS)s" CACHE INTERNAL "asm compiler flags")

set(CMAKE_EXE_LINKER_FLAGS "%(LINKFLAGS)s" CACHE INTERNAL "executable linker flags")
set(CMAKE_MODULE_LINKER_FLAGS "%(LINKFLAGS)s" CACHE INTERNAL "module linker flags")
set(CMAKE_SHARED_LINKER_FLAGS "%(LINKFLAGS)s" CACHE INTERNAL "shared linker flags")

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-wrap,__aeabi_unwind_cpp_pr0 -Wl,-wrap,__aeabi_unwind_cpp_pr1 -Wl,-wrap,__aeabi_unwind_cpp_pr2")

cmake_force_c_compiler(%(CC)s GNU)
cmake_force_cxx_compiler(%(CXX)s GNU)
set(CMAKE_ASM_COMPILER %(CC)s)
set(CMAKE_OBJCOPY arm-none-eabi-objcopy CACHE INTERNAL "objcopy tool")
set(CMAKE_OBJDUMP arm-none-eabi-objdump CACHE INTERNAL "objdump tool")

get_filename_component(INSTALLDIR "${CMAKE_CURRENT_LIST_DIR}/../.." ABSOLUTE)
message(STATUS "Using stm32plus installdir: ${INSTALLDIR}")

set(STM32PLUS_INSTALLDIR "${INSTALLDIR}" CACHE INTERNAL "stm32plus installdir")
set(STM32PLUS_LIBS "${INSTALLDIR}/lib/%(LIBSTM32PLUS)s" CACHE INTERNAL "library location")

# TODO: Bring in these paths from SCons
set(STM32PLUS_INCLUDE_DIRS
  ${INSTALLDIR}/include/stm32plus/
  ${INSTALLDIR}/include/stm32plus/stl)
set(STM32PLUS_FWLIB_INCLUDE_DIRS
  ${INSTALLDIR}/include/stm32plus/fwlib/f4/cmsis/Include
  ${INSTALLDIR}/include/stm32plus/fwlib/f4/cmsis/Device/ST/STM32F4xx/Include
  ${INSTALLDIR}/include/stm32plus/fwlib/f4/stdperiph/inc
  )

function(add_bin_target TARGET)
  if(EXECUTABLE_OUTPUT_PATH)
		set(FILENAME "${EXECUTABLE_OUTPUT_PATH}/${TARGET}")
  else()
	  set(FILENAME "${TARGET}")
	endif()
	add_custom_target(${TARGET}.bin COMMAND ${CMAKE_OBJCOPY} -Obinary ${FILENAME} ${FILENAME}.bin)
	add_dependencies(${TARGET}.bin ${TARGET})
endfunction()
